version: '3.3'
services:
   db:
     image: postgres
     container_name: db
     networks:
       - proxy
     restart: always
     environment:
       - POSTGRES_USER=antenna
       - POSTGRES_PASSWORD=antenna
       - POSTGRES_DB=college
     volumes:
       - pgsqldata:/var/lib/postgresql/data
       - ./docker/pgsql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
     ports:
       - "5432:5432"

   mailsink:
     image: ksokol/mailsink:0.5.0
     container_name: mailsink
     networks:
       - proxy
     restart: always
     ports:
       - "2500:2500"
       - "2525:2525"

   zookeeper:
     image: confluentinc/cp-zookeeper:5.4.2
     hostname: zookeeper
     container_name: zookeeper
     # depends_on:
     #   - db
     ports:
       - "2181:2181"
     environment:
       ZOOKEEPER_CLIENT_PORT: 2181
       ZOOKEEPER_TICK_TIME: 2000
     #      KAFKA_HEAP_OPTS: '-Xms2g -Xmx2g'
     volumes:
       - zoodata:/var/lib/zookeeper/data
       - zoolog:/var/lib/zookeeper/log
       - zoo:/var/log/zookeeper
     networks:
       - proxy
     restart: unless-stopped

   kafka:
     image: confluentinc/cp-kafka:5.4.2
     hostname: kafka
     container_name: kafka
     depends_on:
       - zookeeper
     ports:
       - "9092:9092"
     environment:
       KAFKA_BROKER_ID: 1
       KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
       KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
       KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
       #     -- Settings to review --
       KAFKA_HEAP_OPTS: '-Xms4g -Xmx4g'
       #      KAFKA_HEAP_OPTS: '-Xms2g -Xmx2g'
       KAFKA_LOG_RETENTION_HOURS: 24
       KAFKA_LOG_SEGMENT_BYTES: 536870912
       #KAFKA_LOG_RETENTION_BYTES: 1073741824
       #KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
       #KAFKA_NUM_PARTITIONS: 6
       #KAFKA_DEFAULT_REPLICATION_FACTOR: 2
     #     ----
     #      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
     #      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
     #      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
     #      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
     #      CONFLUENT_METRICS_ENABLE: 'true'
     #      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
     volumes:
       - brokerdata:/var/lib/kafka/data
       - brokerlog:/var/log/kafka
     networks:
       - proxy
     restart: unless-stopped

   schema-registry:
     image: confluentinc/cp-schema-registry:5.4.2
     hostname: schema-registry
     container_name: schema-registry
     depends_on:
       - zookeeper
       - kafka
     ports:
       - "8081:8081"
     environment:
       SCHEMA_REGISTRY_HOST_NAME: schema-registry
       SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
     networks:
       - proxy
     restart: unless-stopped

   connect:
     image: confluentinc/cp-kafka-connect:5.4.2
     hostname: connect
     container_name: connect
     depends_on:
       - zookeeper
       - kafka
       - schema-registry
       - db
     ports:
       - "8083:8083"
     environment:
       CONNECT_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:29092'
       CONNECT_REST_ADVERTISED_HOST_NAME: connect
       CONNECT_REST_PORT: 8083
       CONNECT_GROUP_ID: compose-connect-group
       CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
       CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
       CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
       CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
       CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
       CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
       CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
       CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
       CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
       CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
       CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
       CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
       CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
       # CLASSPATH required due to CC-2422
       # comnent out because not use Kafka-Control-Center
       # CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-5.3.1.jar
       # CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
       # CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
       CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
       CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
     networks:
       - proxy
     restart: unless-stopped


   ksql-server:
     image: confluentinc/cp-ksql-server:5.4.2
     hostname: ksql-server
     container_name: ksql-server
     depends_on:
       - kafka
       - connect
     ports:
       - "8088:8088"
     environment:
       KSQL_CONFIG_DIR: "/etc/ksql"
       KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
       KSQL_BOOTSTRAP_SERVERS: "kafka:29092"
       KSQL_HOST_NAME: ksql-server
       KSQL_LISTENERS: "http://0.0.0.0:8088"
       KSQL_CACHE_MAX_BYTES_BUFFERING: 0
       KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
       KSQL_KSQL_CONNECT_URL: "http://connect:8083"
       # comnent out because not use Kafka-Control-Center
       # KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
       # KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
     volumes:
       - ksqllogs:/usr/logs
     networks:
       - proxy
     restart: unless-stopped

   ksql-cli:
     image: confluentinc/cp-ksql-cli:5.4.2
     container_name: ksql-cli
     depends_on:
       - kafka
       - connect
       - ksql-server
     entrypoint: /bin/sh
     tty: true
     networks:
       - proxy
     volumes:
       - ./docker/ksql/college_0_base.ksql:/etc/ksql/college_0_base.ksql:ro
     restart: unless-stopped

   rest-proxy:
     image: confluentinc/cp-kafka-rest:5.4.2
     depends_on:
       - zookeeper
       - kafka
       - schema-registry
     ports:
       - "8082:8082"
     hostname: rest-proxy
     container_name: rest-proxy
     environment:
       KAFKA_REST_HOST_NAME: rest-proxy
       KAFKA_REST_BOOTSTRAP_SERVERS: 'kafka:29092'
       KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
       KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
     networks:
       - proxy
     restart: always

networks:
  proxy:
    external: true

volumes:
  pgsqldata:
    driver: local
  zoodata:
    driver: local
  zoolog:
    driver: local
  zoo:
    driver: local
  brokerdata:
    driver: local
  brokerlog:
    driver: local
  ksqllogs:
    driver: local
